
About allowed functions	--	https://42-cursus.gitbook.io/guide/rank-03/minishell/functions

About allowed functions -- 	file:///home/lufiguei/Downloads/Base%20Documentation.html



Git commands:
git pull origin main
git branch <name of the new branch>
git branch (just shows what branch you are with *)
git checkout <name of the branch>
git commit -m "your message"
git push 
git branch -a | wc -l "quantas branches tem"
git branch -m new-branch-name "rename a branch, the one you are currently on"
git push origin --delete old-branch-name "delete branch"
git rev-parse --abbrev-ref HEAD "wich branch im on"




compile the program with -lreadline flag
valgrind -s --track-origins=yes --leak-check=full --show-leak-kinds=all --suppressions=valgrind_readline.supp
-q if want it to be "cleaner"

// Como interpretar quais palavras da tokenizacao sao comandos ou apenas palavras

edge cases:::

cd : cd unset $HOME, cd - to old pwd, invalid or non existent. ie.: first time, no old pwd,
        insuficient permissions ie.: cd /root, a very long path, set a PATH_MAX[4096], empty path or too many arguments
        path containing EnvVars, like cd $HOME or cd ~
unsure : Symbolic links?

echo : echo -n, echo -n -n (until a non flag argument is found, keep the first?), echo "-n", empty input, 
        echo "-n" hello, echo hello -n world, ensure trailing spaces or tabs are preserved,
        excessive arguments, echo -n arg1 arg2 arg3 arg4, echo -nhello,
        echo "-n -n"
        echo "-n" -n-n
        echo -n "-n"
        echo -n" -n" -n a


env : unset $(env | awk -F= '{print $1}')  # Unsets all variables, whats the order they appear?
        special characters variables, export SPECIAL="hello\nworld",
        check for unexpected argument, env VAR=value other_command, env --invalid-flag
        memory check, variable names containing non alphanumeric chars, export "123VAR=value", prints without validating
        check NULL pointers, if yes, segfault

exit : no arguments, one valid argument, multiple arguments, nonnumeric argument (exits with 2), out of range values
        ensure cleanup. exit 9223372036854775807 - exit status 255

export : no arguments(prints all env, sorted), export VAR (add var with an empty value), export 123VAR=value (print error not a valid identifier)
            export VAR=va=lue (handle var with value va=lue), export VAR already set(do nothing, preserve)
            export VAR=va\nlue (handle special chars in value), export =value (not a valid identifier)
            export VAR=value VAR2 update VAR and set VAR2 with an empty value
            unsuport flags like -p, variable name collision with shell builtins export export=value, echo $export
            overwrite an existing variable
            if variable name is provided without = or a value, set its value to an empty string

pwd : directory path too long, NULL, directory access issues, Symbolic links?, deleted working directory, mkdir tmp, cd tmp, rmdir ../tmp pwd
        pwd: error retrieving current directory: getcwd: No such file or directory
        Logical/physical path

unset : non existent variable, multiple variables, readonly variables, unsetting shell builtin variables (HOME, PWD, PATH,...)
            variable name validation, unset 123VAR, not a valid identifier, ensure it works for both local shell and exported
            unset SHLVL, trying to unset shell level variable, undefined behavior
            non variable arguments, unset --help, not a valid identifier

$expand : unset variables/variables with no value, expant to an empty string, $$ and $?, $#, \$ do not expand?? variables in quotes, expand in double quotes
            invalid variable names, do not expand, command substitution confusion (differentiate between $() and $VAR)
unsure : arithmetic expansion? echo $((2 + 2)), nesting variables, echo $(`echo hello`) or echo $(ls)

Abstract Syntax Tree (AST)
For a command node: There’s usually only a left child, which represents the command itself and its arguments.
For a redirection node: The left child might represent the command or the left side of the redirection, while the right child represents the file or destination for the redirection.
For a pipeline node (|): The left and right children represent the commands on either side of the pipe. The left side will typically execute first (this is standard in shell pipelines).

Left child first, then right child is the typical rule of thumb for AST execution order.
In case of a pipeline (|), the left side runs first, followed by the right side.
For redirections, the command runs first (left), and the redirection (right) is applied afterward.


5. Common Exit Status Codes

    0: Success.
    1: General error (e.g., command not found or incorrect arguments).
    2: Misuse of shell built-in (for example, invalid syntax).
    126: Command found, but cannot be executed (permission issues).
    127: Command not found (invalid command).
    128: Invalid argument to exit (if you try to exit with an invalid status).
    130: Command terminated by Ctrl+C (SIGINT).
    255: Exit status range limit (indicating an error outside the 0–255 range).